using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyMovement : MonoBehaviour
{
    public float yForce;
    public float xForce;
    private Rigidbody2D enemyRigidbody;
    public int maximumXPosition;
    public int minimumXPosition;
    public bool direction;
    // Start is called before the first frame update
    void Start()
    {
        enemyRigidbody = GetComponent<Rigidbody2D>();
    }

    // Update is called once per frame
    void FixedUpdate()
    {

    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "Ground")
        {
            Vector2 jumpForce = new Vector2(xForce, yForce);
            enemyRigidbody.AddForce(jumpForce);
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        /*        if (collision.gameObject.tag == "LeftWall")
                {
                    Vector2 jumpForce = new Vector2(xForce, yForce);
                    enemyRigidbody.AddForce(jumpForce);
                }*/
        if (collision.gameObject.tag == "LeftWall")
        {
            direction = true;
            if (direction == true)
            {
                Vector2 jumpForce = new Vector2(xForce = 140, yForce);
                enemyRigidbody.AddForce(jumpForce);
            }
        }

        if (collision.gameObject.tag == "RightWall")
        {
            /*            //enemyRigidbody.velocity.x*-1*xForce means that the enemyRigidbody.velocity.xForce becomes a negative number
                        Vector2 jumpForce = new Vector2(enemyRigidbody.velocity.x * -1 * xForce, yForce);
                        enemyRigidbody.AddForce(jumpForce);*/
            direction = false;
            if(direction == false)
            {
                Vector2 jumpForce = new Vector2(xForce = -140, yForce);
                enemyRigidbody.AddForce(jumpForce);
            }
        }

        if(collision.gameObject.tag == "TopWall")
        {
            Vector2 jumpForce = new Vector2(-xForce, enemyRigidbody.velocity.y * -1 * yForce);
            enemyRigidbody.AddForce(jumpForce);
        }
    }
}

10/13
remembers number of stars on home page
be able to go back to level select
time remaining on lvl 3




Classes are a way to organize complex data, fields are easy and simple ways to do this.
Fields are basically variables that belong to that classes
The blue and green things after public or private are fields, they are mostly "int", "bool" or "float".
If private is used, the object won't be able to be accessed on unity by us. 
If public is used, the object will be able to be accessed on  unity by is.

	   scope vartype varname
Definition public bool variable;
Initilization 
Assigning 
Compare < > == <= >=

The green things, blue things, yellow things and white things.

I couldn't destroy the door in my game so I asked Albert for help but he didn't really. Albert told me that there were 2 ways and I thought one was too hard so I thought of another one but forgot how to do it so he told me to search it up on google(he had to use his big brain to make me write this).
I searched it up on google and found the answer(how to find a specific game object in unity).
I was being stupid and made the game object called hand instead of door.

GameObject.Find

Making a variable with a public scope then adding the game object through unity.

gameObject is not a function
hover over words to answer Albert's questions
void is return type




